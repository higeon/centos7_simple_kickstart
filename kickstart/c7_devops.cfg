#version=RHEL7

# Repo: https://github.com/ohdns/centos7_simple_kickstart.git

install

# get netinstall image from a mirror and then validate sha256sum from
# https://wiki.centos.org/Manuals/ReleaseNotes/CentOS7

# mirror repo, validate gpg sigs for all RPM's, then serve them internally
# to save bandwidth and get reproducable results.
# Internal repo mirrors must not be more than 3 months behind the public mirrors.

url --url=http://192.168.120.10/mirror/centos/7/os/x86_64/
repo --cost=1 --name=extras --baseurl=http://192.168.120.10/mirror/centos/7/extras/x86_64/
repo --cost=1 --name=updates --baseurl=http://192.168.120.10/mirror/centos/7/updates/x86_64/
repo --cost=2 --name=EPEL --baseurl=http://192.168.120.10/mirror/epel/7/x86_64/
# use --install with internal repos

cmdline
#text
skipx

firstboot --disable
keyboard --vckeymap=us --xlayouts='us'
#monitor --noprobe

lang en_US.UTF-8

eula --agreed

network --noipv6 --bootproto=static --ip=192.168.120.20 --netmask=255.255.255.0 --onboot=yes --activate

logging --host=192.168.120.10

authconfig --enableshadow --passalgo=sha512 --disablefingerprint --updateall

# authconfig --enableshadow --passalgo=sha512 --enableldap --enableldapauth --ldapserver=ldap://192.168.120.10:389/ --ldapbasedn="dc=somedomain,dc=com" --enablecache --disablefingerprint --kickstart --updateall



selinux --enforcing

# this is a default silly password, on purpose.  change this to your own hash.
rootpw --iscrypted $6$20151013$cIgj/AU9/8fDQsiTfqw5D6qtE9.KRi5l46IToNAjE0RxFA8g.7uiK/f2XJ4CRdvc7CgyJMf4lKwGL/yMrlfcF/

services --enabled="ntpd,sshd,network,auditd,restorecond,iptables.service,ip6tables.service,rsyslog,docker"


# System timezone
timezone UTC --isUtc --ntpservers=192.168.120.10

# for first access via ansible or other config management
# this is a default silly password, on purpose.  change this to your own hash.
user --groups=wheel --homedir=/home/ohadmin --name=ohadmin --password=$6$20151013$cIgj/AU9/8fDQsiTfqw5D6qtE9.KRi5l46IToNAjE0RxFA8g.7uiK/f2XJ4CRdvc7CgyJMf4lKwGL/yMrlfcF/ --iscrypted --uid=99990 --gecos="Anisble Automation" --gid=99990

#bootloader --location=mbr --boot-drive=sda --append="console=ttyS1,115200 text elevator=noop selinux=1 noparport audit=1"
bootloader --location=mbr --boot-drive=sda

zerombr
clearpart --drives=sda --all --initlabel
part /boot --fstype=xfs --ondisk=sda --size=256 --asprimary --fsoptions="defaults,noatime,inode64"
# this disk password should really be derrived from a cgi template that looks at
#  input from the user, or a combination of their ldap/ad creds and 2FA.
#  perhaps use something like Vault for this.
part pv.1 --size=2 --ondisk=sda --grow --encrypted --passphrase=centos7
volgroup vg00 --pesize=32768 pv.1
logvol / --fstype=xfs --vgname=vg00 --size=16384 --name=rootfs --fsoptions="defaults,noatime,inode64"
logvol /var --fstype=xfs --vgname=vg00 --size=4096 --name=var --fsoptions="defaults,noatime,inode64"
logvol /var/log --fstype=xfs --vgname=vg00 --size=4096 --name=vlog --fsoptions="defaults,noatime,inode64"
logvol /var/log/audit --fstype=xfs --vgname=vg00 --size=128 --name=vaudit --fsoptions="defaults,noatime,inode64"
logvol /tmp --fstype=xfs --vgname=vg00 --size=768 --name=tmp --fsoptions="defaults,noatime,inode64"
logvol /var/tmp --fstype=xfs --vgname=vg00 --size=768 --name=vtmp --fsoptions="defaults,noatime,inode64"
#
# try to discourage people from saving things locally in /home.  build automation ftw.
#  why?  wont be running from /home in customer environments.
#  custom x86_64 apps should be in a uniqe named dir in /opt
#  custom proprietary code should be in /data
#  /home is for snowflakes.  /home is ephemeral.  Long live /home.
#  but seriously, check everything in.  build and deploy artifacts.  everything else is a melting snowflake.
#
logvol /home --fstype=xfs --vgname=vg00 --size=4096 --name=home --fsoptions="defaults,noatime,inode64"
logvol /data --fstype=xfs --vgname=vg00 --size=512 --name=data --fsoptions="defaults,noatime,inode64"

# man pages are online, or you could use a management server to read the man pages.
# they are just a waste of space on our little virtual machines.
%packages --nobase --nocore --ignoremissing
@core --nodefaults
audit
bzip2
ccze
cryptsetup
ethtool
grubby
iptables-services
libselinux-python
libselinux-utils
lftp
lvm2
net-tools
openssh-server
policycoreutils-python
policycoreutils-restorecond
rsync
ntp
pam_passwdqc
postfix
screen
setools-console
sudo 
sysstat
xz
#
# troubleshooting tools
lsof
strace
tcpdump
#
# desktops
gnome-desktop3
gnome-classic-session
gnome-terminal
-gnome-online-accounts
#
# X Windows
nautilus-open-terminal
control-center
liberation-mono-fonts
libXvMC
libXxf86dga
libdmx
libevdev
mesa-libxatracker
mtdev
plymouth-graphics-libs
plymouth-plugin-label
plymouth-plugin-two-step
plymouth-system-theme
plymouth-theme-charge
spice-vdagent
xorg-x11-drivers
xorg-x11-drv-ati
xorg-x11-drv-dummy
xorg-x11-drv-evdev
xorg-x11-drv-fbdev
xorg-x11-drv-intel
xorg-x11-drv-qxl
xorg-x11-drv-synaptics
xorg-x11-drv-v4l
xorg-x11-drv-vesa
xorg-x11-drv-vmmouse
xorg-x11-drv-vmware
xorg-x11-drv-void
xorg-x11-drv-wacom
xorg-x11-fonts-100dpi
xorg-x11-fonts-75dpi
xorg-x11-fonts-cyrillic
xorg-x11-server-Xorg
xorg-x11-server-Xvfb
xorg-x11-utils
xvattr
#
# DKMS for VirtualBox
dkms
#
# desktop utilities
autofs
bc
bleachbit
cifs-utils
clamav
clamav-db
clamav-milter-systemd
clamav-scanner-systemd
fail2ban-systemd
firefox
gedit
gnutls
htop
# network throughput
iftop
inotify-tools
iotop
# network performance testing
iperf3
# a game, cuz bored
kmahjongg
# lftp for recursive sftp on older boxes
lftp
# command line music
mpg123
mosh
mtr
# use 7za (p7zip) for encrypting files please
p7zip
pbzip2
rsyslog
powertop
sssd*
tinc
wine-desktop
wine-systemd
vim
vim-common
vim-enhanced
vim-X11
yum-cron
yum-updateonboot
yum-utils
yum-NetworkManager-dispatcher
#
# laptop networking
dhcp
dhclient
NetworkManager*
iw
iwl*
wavemon
wireless-tools
#
# SELinux Dev
libsepol-devel
policycoreutils-devel
policycoreutils-gui
policycoreutils-sandbox
selinux-policy-devel
selinux-policy-sandbox
setools-devel
setools-gui
#
# compilation and misc dev tools
# ant
cmake
# probably replace docker with upstream latest stable
# ensure you get the docker-selinux package too
docker
docker-selinux
erlang
gcc-c++
gcc-objc
gcc-objc++
gcc.x86_64
git
git-svn
git-gui
glibc-common.x86_64
glibc-devel.x86_64
glibc-headers.x86_64
glibc-static.x86_64
glibc-utils.x86_64
glibc.x86_64
golang
imake
kernel-docs
kernel-devel
#kubernetes
#kubernetes-client
#kubernetes-node
#lxc
#lxc-doc
#lxc-devel
make
#maven
#mcollective
#mcollective-client
#mcollective-common
#python-jenkins
qemu
qemu-common
qemu-image
qemu-kvm
ruby
virt-who
#
# serve some things for testing
apr
apr-util
haproxy
httpd
mariadb
mariadb-server
mod_security
mod_ssl
# avoid nginx until lead dev removes cflag/ldflag hard coding that weakens nginx
openssl
openssl-devel
pcre
redis
zlib
#
-kdump
-prelink
-rhpl
%end


%pre
printf "\nPRE\n"

%end



# START POST
%post --log=/root/c7-install.log
exec < /dev/console > /dev/console

printf "\n\nRunning custom post install steps. Some of these take a while.\n\n"

LC_ALL=C
LANG=C
KSDATE=`date '+%Y%m%d.%H%M'`
export KSDATE LC_ALL LANG

echo "PRELINKING=no" >> /etc/sysconfig/prelink

sed -i -e 's/plugins=1/plugins=0/g' /etc/yum.conf

# keep current
set -i -e 's/^update_messages.*/update_messages = yes/g' /etc/yum/yum-cron-hourly.conf
set -i -e 's/^download_updates.*/download_updates = yes/g' /etc/yum/yum-cron-hourly.conf
set -i -e 's/^apply_updates.*/apply_updates = yes/g' /etc/yum/yum-cron-hourly.conf
set -i -e 's/^email_to.*/email_to = devnull/g' /etc/yum/yum-cron-hourly.conf

mkdir --mode=0711 -p /etc/ssh/keys
printf "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEA9Yyta66NvfulDqVh48Xtmrn/ANw6MFwHzCnxRQ+HQw+/sMKKQh4IlvDc1afsiY9qpDVR3BJmIUuwnnyC9p9tgJJ11g02ha7ZAAfWhC45biu6heC1osmmrtwS5+GtNRynPvzXQiLnY84GHPquKN/QwNPmL+vbMVQ7cnvnnxMU/1SNZg/SvwD+ij7TVVMyVTKbna957dAwTlOJccd6m5C4i0qmS4FqPEQkatrI2yYAbKxJPT5iG+9NwDBpyRaNxqVIQ9Uw26wt3YMrUN7VoClJDO6o89expd1mYuMb7Lp64E5eTMmThVL5r1JuLuSA9TzCFAqWP46Paaz1/7ClJ7WyaKOqca+RmfXAviZzELtfT1Pnltq+w7F6mNgzLjuyPbqbxzolk2PDO7d+CAm5ly8CSeuyMCLzQKksoORLGWwWmXi/yvfcbdiFRY2WOdYqDTvdwxVxrNEXQF9tmAsjMW5g5v0/EI1N1S0eNqQK+8/L2rK9vbNGOoqa8/6d8b6CgyoC1WyNSGO2PV/DS2bUjGnMzzxQrB2a9ZqWWl9i2OZSPMz4CIgFIdVEoau8391lv06wWNawloOmQLF1mkat7EpfkuuR9h9Nhm2VhqhZP2UdRJKE6aIThxylSRpS/JEBGV9mSoKTswEdka4FqhaqebeCRW76nTK9XGz5SdL5MGS3Fhs= ansible_automation\n" > /etc/ssh/keys/ohadmin
chmod 0400 /etc/ssh/keys/ohadmin
chown ohadmin:ohadmin /etc/ssh/keys/ohadmin


cat << zzzRSYSLOG_GLOBALzzz > /etc/rsyslog.conf

# rsyslog
\$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
\$ModLoad imjournal # provides access to the systemd journal
\$WorkDirectory /var/lib/rsyslog
\$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
\$ActionFileEnableSync off
\$IncludeConfig /etc/rsyslog.d/*.conf
\$OmitLocalLogging on
\$IMJournalStateFile imjournal.state
\$FileOwner root
\$FileGroup wheel
\$DirOwner root
\$DirGroup wheel
\$DirCreateMode 0700
\$FileCreateMode 0600
\$PreserveFQDN off
\$RepeatedMsgReduction on
kern.*                       /dev/console
*.emerg                      :omusrmsg:*
#
# we even send to oursevles if this is the syslog server.
*.*,cron.none   @192.168.120.10:514

zzzRSYSLOG_GLOBALzzz

cat << zzzRSYSLOG_SERVERzzz > /etc/rsyslog.d/10_server.conf

\$ModLoad imudp
\$UDPServerRun 514
\$ModLoad imtcp
\$InputTCPServerRun 514
\$template ohsyslog,"/var/log/syslog/%HOSTNAME%/%syslogfacility-text%.log"
\$template RFC3164fmt,"<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%%msg%\n"
:inputname, isequal, "imudp" ?ohsyslog;RFC3164fmt
& ~

zzzRSYSLOG_SERVERzzz




# set ramdisk size, let conf mgmt adjust later if required
printf "tmpfs\t/dev/shm\ttmpfs\tdefaults,noatime,nodev,size=256m 0 0\n" >> /etc/fstab
# uncomment if you want home to be transient, perhaps remove _logvol_ for home near top
# printf "tmpfs\t/home\ttmpfs\tdefaults,noatime,size=255m 0 0\n" >> /etc/fstab
printf "devpts\t/dev/pts\tdevpts\tgid=5,mode=620 0 0\n" >> /etc/fstab
printf "sysfs\t/sys\tsysfs\tdefaults 0 0\n#${KSDATE}\n" >> /etc/fstab


cat << zzzIPTABLESzzz > /etc/sysconfig/iptables
#${KSDATE}
*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#
# accept icmp in the raw table to avoid state table hits.
-A PREROUTING -p icmp --icmp-type any -s 192.168.120.0/24 -j ACCEPT
-A PREROUTING -p icmp --icmp-type any -j DROP
#
# drop some simple nmap scans.
-A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
-A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
-A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
-A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
-A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
-A PREROUTING -p tcp --tcp-flags ALL FIN -j DROP
#
# accept icmp in the raw table to avoid state table hits.
-A OUTPUT -p icmp --icmp-type any -d 192.168.120.0/24 -j ACCEPT
-A OUTPUT -p icmp --icmp-type any -j DROP
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
*filter
# this is the default iptables table that everyone knows and loves.
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#
# accept packets on the loopback.
-A INPUT -i lo -j ACCEPT
#
# drop sctp, because we wont likely ever see it in the real world,
# and most implementations of it have serious flaws.
-A INPUT -p sctp -j DROP
#
#
# ADD CUSTOM SERVICES HERE BELOW THIS LINE
#
# example:
# ssh with limits to avoid some forms of brute forcing.
# if you find automation is breaking because of this, please reconsider your automation method.
-A INPUT -m tcp -p tcp --syn --dport 22 -m limit --limit 2/min --limit-burst 2 -j ACCEPT
#
#
#
# UNcomment or modify as required for services, docker services, microservices, etc.
#  You should document ports your app requires and even define it somewhere that is
#  codified so automation tools can modify the network as required.  think future SDN.
#
#
# haproxy or apache httpd perhaps
# -A INPUT -m tcp -p tcp --dport 80 -j ACCEPT
# -A INPUT -m tcp -p tcp --dport 443 -j ACCEPT
#
# maybe tomcat?
# -A INPUT -m tcp -p tcp --dport 8080 -j ACCEPT
#
#
#
#
# END CUSTOM SERVICES
#
# drop packets that are not valid in our state table.
-A INPUT -m state --state INVALID -j DROP
#
# allow packets that are valid in our state table.
# Try to avoid hitting this rule, as it is potentially CPU expensive.
-A INPUT -m state --state ESTABLISHED -j ACCEPT
#
# debugging, visible in dmesg and syslog. please consider the impact on syslog servers.
# -A INPUT -m limit --limit 1/second --limit-burst 1 -m tcp -p tcp -j LOG --log-prefix="INPUT_TCP: " --log-ip-options --log-tcp-options --log-level 7
# -A INPUT -m limit --limit 1/second --limit-burst 1 -m udp -p udp -j LOG --log-prefix="INPUT_UDP: " --log-ip-options --log-level 7
#
-A INPUT -j DROP
#
# END of "filter" table INPUT chain.
#
#
#
# we are not a router, so drop forwarded packets.
# NOTE: if we are a software defined router, this has to be set to ACCEPT
-A FORWARD -j DROP
#
#
#
#
# drop OUTBOUND packets that are not valid, first.
# applications may trip over this one if their tcp implementation was written in a hurry.
-A OUTPUT -m state --state INVALID -j DROP
#
# allow packets that are valid in our state table. This rule is potentially expensive.
-A OUTPUT -m state --state ESTABLISHED -j ACCEPT
#
# accept packets destin for 127.0.0.1 and not the entire /8.
-A OUTPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT
#
#
# ntp
-I OUTPUT -m udp -p udp --dport 123 -d 192.168.120.10 -j ACCEPT
#
# yum
-I OUTPUT -m tcp -p tcp --dport 80 -d 192.168.120.10 -j ACCEPT
#
# rsync
-I OUTPUT -m tcp -p tcp --dport 873 -d 192.168.120.10 -j ACCEPT
#
#
#
# -I OUTPUT -d _VPN_NETWORK1_ -j ACCEPT
# -I OUTPUT -d _VPN_NETWORK2_ -j ACCEPT
# -I OUTPUT -d _VPN_NETWORK3_ -j ACCEPT
#
#
# DANGEROUS, LET EVERYTHING OUT.
# loose packets sink ships
# remove the following and instead use an https proxy and/or a VPN.
# besides, production systems wont be free egress.
# any that are, won't be for long.
#
# DERP rules
-A OUTPUT -m tcp -p tcp -j ACCEPT
-A OUTPUT -m udp -p udp -j ACCEPT
#
#
#
# END CUSTOM SERVICES
#
# catchall logging rules just in case we think iptables is breaking our application.
-A OUTPUT -m limit --limit 2/second --limit-burst 2 -m tcp -p tcp --syn -j LOG --log-prefix="OUTPUT_TCP: " --log-uid --log-level 7
-A OUTPUT -m limit --limit 2/second --limit-burst 2 -m udp -p udp -j LOG --log-prefix="OUTPUT_UDP: " --log-uid --log-level 7
# let application know they were rejected
-A OUTPUT -m tcp -p tcp -j REJECT --reject-with tcp-reset
-A OUTPUT -j DROP
COMMIT
#${KSDATE}

zzzIPTABLESzzz


cat << zzzIP6TABLESzzz > /etc/sysconfig/ip6tables
#${KSDATE}
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT
#${KSDATE}

zzzIP6TABLESzzz


cat << zzzSYSCTLzzz > /etc/sysctl.conf
#${KSDATE}
fs.file-max = 1000000
fs.dir-notify-enable = 1
# inotify required for FIM, AntiVirus, some automation.
fs.inotify.max_queued_events = 1024000
fs.inotify.max_user_instances = 1024000
fs.inotify.max_user_watches = 32768
fs.leases-enable = 1
fs.lease-break-time = 50
fs.suid_dumpable = 0
kernel.acct = 35 25 90
kernel.core_pattern = /tmp/core.%s.%u.%g.%p.%t
kernel.core_uses_pid = 1
kernel.pid_max = 1999999
kernel.ctrl-alt-del = 0
# wait long enough on panic for iDrac/ilo to capture stack trace
kernel.panic = 20
kernel.panic_on_oops = 20
kernel.printk = 2 4 2 7
kernel.hung_task_timeout_secs = 180
kernel.sem = 1024 512000 1024 4096
kernel.shmall = 4294967296
kernel.shmmax = 137438953472
kernel.shmmni = 4096
kernel.msgmni = 32768
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.sysrq = 1
kernel.kptr_restrict = 2
kernel.dmesg_restrict = 1
kernel.randomize_va_space = 2
# set nmi_watchdog to 0 on laptop or embeded.
#     nmi_watchdog to 1 on servers.
kernel.nmi_watchdog = 1
kernel.hung_task_timeout_secs = 220
kernel.perf_event_paranoid = 2
net.core.optmem_max = 4096000
net.core.rmem_default = 32768
net.core.wmem_default = 32768
# reduce mem max and default on internet facing servers
# to reduce chances of memory depletion.
net.core.rmem_max = 1536400000
net.core.wmem_max = 1536000000
net.core.message_burst = 40
# somaxconn half-open connections allowed
net.core.somaxconn = 32768
# set tcp_abort_on_overflow to 1 to fail fast behind a load balancer.
net.ipv4.tcp_abort_on_overflow = 0
net.core.netdev_max_backlog = 409600
# set sched_migration_cost_ns MUCH higher for heavy forking daemons
# such as Apache using mpm_prefork or PostgreSQL.
kernel.sched_migration_cost_ns = 500000
# disable ipv6, sorry.
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv4.conf.all.log_martians = 1
# handle timeouts on short lived connections better from client perspective.
net.ipv4.tcp_thin_linear_timeouts = 1
net.ipv4.tcp_thin_dupack = 1
net.ipv4.ip_nonlocal_bind = 0
net.ipv4.conf.all.shared_media = 0
net.ipv4.tcp_challenge_ack_limit = 1842
net.ipv4.ip_forward = 0
net.ipv4.tcp_mtu_probing = 1
# reduce mem max and default on internet facing servers
# to reduce chances of memory depletion.
net.ipv4.udp_mem = 98304 153600 40960000
net.ipv4.tcp_mem = 98304 153600 40960000
net.ipv4.udp_rmem_min = 4096
net.ipv4.udp_wmem_min = 4096
net.ipv4.tcp_rmem = 32768 131070 1536800000
net.ipv4.tcp_wmem = 10240 131070 1536000000
net.ipv4.conf.all.accept_redirects = 0
# arp_notify 1 required in many virtualized environments
# for proper migration of VM or SDN changes.
net.ipv4.conf.all.arp_notify = 1
net.ipv4.conf.default.arp_notify = 1
net.ipv4.conf.all.arp_announce = 0
net.ipv4.conf.all.arp_filter = 0
net.ipv4.conf.all.arp_ignore = 0
net.ipv4.conf.all.bootp_relay = 0
net.ipv4.conf.all.proxy_arp = 0
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.default.arp_announce = 0
net.ipv4.conf.default.arp_filter = 0
net.ipv4.conf.default.arp_ignore = 0
net.ipv4.conf.default.log_martians = 1
net.ipv4.conf.default.proxy_arp = 0
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.lo.arp_announce = 0
net.ipv4.conf.lo.arp_filter = 0
net.ipv4.conf.lo.arp_ignore = 0
net.ipv4.conf.lo.log_martians = 1
net.ipv4.conf.lo.proxy_arp = 0
net.ipv4.conf.lo.secure_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
net.ipv4.icmp_echo_ignore_all = 0
net.ipv4.icmp_echo_ignore_broadcasts = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1
# apply icmp rate limit to all ICMP
net.ipv4.icmp_ratemask = 88089
# 1000 jiffies between replies
net.ipv4.icmp_ratelimit = 1000
# raise ttl due to some VPN+WAN implementations.
net.ipv4.ip_default_ttl = 127
# dont spend much time on fragmented packets.
net.ipv4.ipfrag_time = 10
net.ipv4.ipfrag_max_dist = 220
net.ipv4.xfrm4_gc_thresh = 500000
net.ipv4.route.gc_thresh = 500000
net.ipv4.route.mtu_expires = 10000
net.ipv4.route.gc_interval = 2000
net.ipv4.route.gc_timeout = 2000
# leave ip_local_port_range wide, then customize
# ip_local_reserved_ports for listeners per server role.
net.ipv4.ip_local_port_range = 1024 65535
# ip_local_reserved_ports is role specific
# override this with configuration management such as ansible.
net.ipv4.ip_local_reserved_ports = 5666,65520-65535
net.ipv4.ip_no_pmtu_disc = 0
net.sctp.auth_enable = 1
net.netfilter.nf_conntrack_helper = 0
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-arptables = 0
net.netfilter.nf_conntrack_acct = 1
net.netfilter.nf_conntrack_events = 1
# increase state table limits.
net.nf_conntrack_max = 500000
net.ipv4.netfilter.ip_conntrack_max = 500000
net.ipv4.netfilter.ip_conntrack_checksum = 0
net.ipv4.netfilter.ip_conntrack_tcp_be_liberal = 0
net.ipv4.netfilter.ip_conntrack_tcp_loose = 0
net.ipv4.netfilter.ip_conntrack_tcp_max_retrans = 63
net.ipv4.netfilter.ip_conntrack_tcp_timeout_max_retrans = 63
net.ipv4.netfilter.ip_conntrack_icmp_timeout = 2
net.ipv4.netfilter.ip_conntrack_tcp_timeout_syn_recv = 30
net.ipv4.netfilter.ip_conntrack_tcp_timeout_syn_sent = 120
net.ipv4.netfilter.ip_conntrack_tcp_timeout_close = 60
net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait = 120
net.ipv4.netfilter.ip_conntrack_tcp_timeout_last_ack = 60
net.ipv4.netfilter.ip_conntrack_tcp_timeout_close_wait = 60
net.ipv4.netfilter.ip_conntrack_tcp_timeout_fin_wait = 60
net.ipv4.netfilter.ip_conntrack_tcp_timeout_established = 172800
net.ipv4.netfilter.ip_conntrack_udp_timeout_stream = 60
net.ipv4.netfilter.ip_conntrack_udp_timeout = 60
net.netfilter.nf_conntrack_generic_timeout = 300
net.netfilter.nf_conntrack_tcp_timeout_close = 8
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 50
net.netfilter.nf_conntrack_tcp_timeout_established = 172800
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 60
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 60
net.netfilter.nf_conntrack_tcp_timeout_max_retrans = 63
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 30
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 120
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120
net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 120
net.netfilter.nf_conntrack_udp_timeout = 30
net.netfilter.nf_conntrack_udp_timeout_stream = 60
net.netfilter.nf_conntrack_udplite_timeout = 30
net.netfilter.nf_conntrack_udplite_timeout_stream = 60
# set nf_conntrack_log_invalid and ip_conntrack_log_invalid
# to 255 to log invalid packets.
net.netfilter.nf_conntrack_log_invalid = 0
net.ipv4.netfilter.ip_conntrack_log_invalid = 0
net.ipv4.tcp_fastopen = 0
net.ipv4.tcp_adv_win_scale = 2
net.ipv4.tcp_app_win = 31
net.ipv4.tcp_low_latency = 0
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_frto = 0
#net.ipv4.tcp_frto_response = 0
net.ipv4.tcp_congestion_control = cubic
# in conjunction with tcp_slow_start_after_idle,
# also look into initcwnd and initrwnd, configurable
# by ip route change to default gw.
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_fin_timeout = 40
net.ipv4.tcp_keepalive_time = 30
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 4095
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 2048000
# set tcp_tw_recycle to 0 on devices behind load balancers.
# set tcp_tw_recycle to 1 on everything else to avoid socket depletion.
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_no_metrics_save = 0
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 7
net.ipv4.tcp_reordering = 7
net.ipv4.tcp_retrans_collapse = 1
net.ipv4.tcp_retries1 = 4
net.ipv4.tcp_retries2 = 12
# disable sack, fack and dsack on low latency devices,
# such as telephony and game servers.
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_rfc1337 = 0
# syncookies is a mixed bag.
# use on public internet facing devices only.
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_syn_retries = 4
net.ipv4.tcp_synack_retries = 4
# timestamps are some overhead, but reduce some
# cases of retransmission.
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.cipso_cache_enable = 0
net.unix.max_dgram_qlen = 192
# allow slightly more un-ack packets.
net.ipv4.neigh.default.proxy_qlen = 74
net.ipv4.neigh.default.unres_qlen = 9
net.ipv4.neigh.default.unres_qlen_bytes = 32767
net.ipv4.neigh.lo.proxy_qlen = 192
net.ipv4.neigh.lo.unres_qlen = 9
net.ipv4.neigh.lo.unres_qlen_bytes = 32767
# high locktime to avoid frequent changes of arp.
# lower this on L2 load balanced solutions.
net.ipv4.neigh.default.locktime = 39999
net.ipv4.neigh.lo.locktime = 39999
# minimize arp table gc to lower latency and chatter.
net.ipv4.neigh.default.gc_interval = 2000
net.ipv4.neigh.default.gc_stale_time = 2000
net.ipv4.neigh.default.gc_thresh1 = 2000
net.ipv4.neigh.default.gc_thresh2 = 3000
net.ipv4.neigh.default.gc_thresh3 = 4000
# increase inet_peer_threshold even higher on routers.
net.ipv4.inet_peer_threshold = 65535
# uncomment sunrpc entries on nfs servers.
# modify /etc/sysconfig/nfs: RPCNFSDCOUNT to match
#sunrpc.tcp_slot_table_entries = 127
#sunrpc.udp_slot_table_entries = 127
# if you are doing perf debugging of the kernel or
# interrupts, then lower stat_interval in your test scripts.
vm.stat_interval = 10
vm.lowmem_reserve_ratio = 512 384 64
vm.admin_reserve_kbytes = 32768
vm.user_reserve_kbytes = 262144
vm.min_free_kbytes = 266240
vm.max_map_count = 262144
# set vfs_cache_pressure to 10000 to prefer pagecache.
# set vfs_cache_pressure to 200 on file servers.
vm.vfs_cache_pressure = 10000
# panic_on_oom 2 to self heal, dont do this on RDBMS databases.
# panic_on_oom 2 to self heal, dont do this on RDBMS databases.
vm.panic_on_oom = 2
vm.dirty_ratio = 80
vm.dirty_background_ratio = 20
vm.swappiness = 0
vm.overcommit_memory = 0
# unix vs. linux behavior for overcommit_ratio.
vm.overcommit_ratio = 0
vm.page-cluster = 3
vm.dirty_expire_centisecs = 15000
vm.dirty_writeback_centisecs = 2000
# set zone_reclaim_mode to 0 for large databases or file servers.
#                       to 4 for latency sensitive compute nodes.
vm.zone_reclaim_mode = 0
# vm.zone_reclaim_mode = 4
# set laptop_mode to 0 on servers.
#                 to 5 on laptops, embedded devices and tor nodes.
vm.laptop_mode = 0
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_be_liberal = 0
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_udplite_timeout = 90
net.netfilter.nf_conntrack_udplite_timeout_stream = 180
net.netfilter.nf_conntrack_tcp_max_retrans = 63
net.netfilter.nf_conntrack_helper = 0
#${KSDATE}

zzzSYSCTLzzz

cat /etc/sysctl.conf > /etc/sysctl.d/16-sysctl.conf


# prefer ipv4 over ipv6
cat << zzzGLIBC_GAIzzz > /etc/gai.conf
label       ::1/128        0
label       ::/0           1
label       2002::/16      2
label       ::/96          3
label       ::ffff:0:0/96  4
precedence  ::1/128        50
precedence  ::/0           40
precedence  2002::/16      30
precedence  ::/96          20
precedence  ::ffff:0:0/96  100

zzzGLIBC_GAIzzz


cat << zzzSSHD_CONFIGzzz > /etc/ssh/sshd_config
#${KSDATE}
AddressFamily				inet
Port					22
Protocol				2
SyslogFacility				AUTHPRIV
LogLevel				VERBOSE
LoginGraceTime				20s
PermitRootLogin				no
MaxStartups				16
MaxAuthTries				8
MaxSessions				1
AuthorizedKeysFile			/etc/ssh/keys/%u
HostKey					/etc/ssh/ssh_host_rsa_key
HostKey					/etc/ssh/ssh_host_ecdsa_key
#
PubkeyAuthentication			yes
PasswordAuthentication			yes
RSAAuthentication			no
ChallengeResponseAuthentication		no
GSSAPIAuthentication			no
HostbasedAuthentication			no
KerberosAuthentication			no
RhostsRSAAuthentication			no
#
IgnoreUserKnownHosts			yes
IgnoreRhosts				yes
GSSAPICleanupCredentials		yes
UsePAM					yes
AcceptEnv				LANG LC_*
AllowAgentForwarding			no
AllowTcpForwarding			no
GatewayPorts				no
X11Forwarding				no
PrintMotd				no
PrintLastLog				no
TCPKeepAlive				yes
UsePrivilegeSeparation			yes
PermitUserEnvironment			no
UseLogin				no
Compression				delayed
ClientAliveInterval			58
ClientAliveCountMax			2
ShowPatchLevel				no
UseDNS					no
PermitTunnel				yes
Subsystem				sftp internal-sftp -l VERBOSE -f AUTHPRIV
#Banner					/etc/ssh/banner.txt
#
# ONLY CHANGE THIS IF YOU UNDERSTAND THE IMPLICATIONS
AllowUsers				ohadmin@192.168.120.*
#
Match User				ohadmin
	PubkeyAuthentication		yes
	PasswordAuthentication		yes
	PermitEmptyPasswords		no
	GatewayPorts			no
	AllowTcpForwarding		no
	HostbasedAuthentication		no
	RhostsRSAAuthentication		no
	AllowAgentForwarding		no
#
Match Group				sftpusers
	PubkeyAuthentication		yes
	PasswordAuthentication		no
	PermitEmptyPasswords		no
	GatewayPorts			no
	ChrootDirectory			/data/sftp/%u
	ForceCommand			internal-sftp
	AllowTcpForwarding		no
	AllowAgentForwarding		no
	PermitRootLogin			no
#${KSDATE}

zzzSSHD_CONFIGzzz


cat << zzzLIMITSzzz > /etc/security/limits.d/16-limits.conf
#${KSDATE}
# hint: * does not match root, but it does match everyone else.
#       This only applies to non systemd initiated services.
#<domain>      <type>  <item>         <value>
*		hard	core		0
*		soft	nofile		32768
*		hard	nofile		131070
*		soft	stack		32768
*		hard	stack		65535
root		soft	stack		32768
root		hard	stack		65535
#
postfix		soft	priority	18
postfix		hard	priority	18
postfix		soft	nofile		512
postfix		hard	nofile		512
#
nobody		soft	priority	19
nobody		hard	priority	19
#
apache		soft	priority	16
apache		hard	priority	16
apache		soft	nofile		32768
apache		hard	nofile		65535
apache		soft	nproc		32768
apache		hard	nproc		131070
#
mysql		soft	priority	10
mysql		hard	priority	10
mysql		soft	nofile		65535
mysql		hard	nofile		131070
#
#${KSDATE}

zzzLIMITSzzz


cat << zzzRCLOCALzzz >> /etc/rc.d/rc.local
#${KSDATE}
for interface in \`/sbin/ip addr | /bin/grep BROAD | /bin/awk {'print \$2'} | /bin/awk -F ":" {'print \$1'}\`
do
/sbin/ifconfig \${interface} txqueuelen 4000
/sbin/ethtool -K \${interface} tso off
/sbin/ethtool -K \${interface} ufo off
/sbin/ethtool -K \${interface} gro off
/sbin/ethtool -K \${interface} gso off
/sbin/ethtool -K \${interface} lro off
/sbin/ethtool -K \${interface} rx off
/sbin/ethtool -K \${interface} tx off
/sbin/ethtool -K \${interface} sg off
done
/sbin/sysctl -e -p > /dev/null 2>&1
echo 4096 > /sys/fs/selinux/avc/cache_threshold
#
# change gid to monitoring group eventually
/bin/mount -o remount,hidepid=2,gid=0 /proc
#${KSDATE}

zzzRCLOCALzzz


chmod 1555 /etc/rc.d/rc.local



printf "#${KSDATE}\noptions xt_recent ip_list_tot=1000 ip_pkt_list_tot=30" > /etc/modprobe.d/xt_recent.conf

# disable some vulns
echo "install dccp /bin/false" > /etc/modprobe.d/dccp.conf
echo "install sctp /bin/false" > /etc/modprobe.d/sctp.conf
echo "install rds /bin/false" > /etc/modprobe.d/rds.conf
echo "install tipc /bin/false" > /etc/modprobe.d/tipc.conf
echo "install cramfs /bin/false" > /etc/modprobe.d/cramfs.conf
echo "install freevxfs /bin/false" > /etc/modprobe.d/freevxfs.conf
echo "install jffs2 /bin/false" > /etc/modprobe.d/jffs2.conf
echo "install hfs /bin/false" > /etc/modprobe.d/hfs.conf
echo "install hfsplus /bin/false" > /etc/modprobe.d/hfsplus.conf
echo "install squashfs /bin/false" > /etc/modprobe.d/squashfs.conf
echo "install udf /bin/false" > /etc/modprobe.d/udf.conf
echo "options loop max_loop=64" > /etc/modprobe.d/max_loop.conf


# stick with old school iptables for now
# until systemd and its children mature a bit
systemctl mask firewalld
systemctl enable iptables.service
systemctl enable ip6tables.service

# enable desktop, hopefully.
systemctl set-default graphical.target

# install and configure, but disable and set safe defaults
# use smtp-sink for testing instead of the real deal.
postconf -e "inet_interfaces = localhost"
postconf -e "2bounce_notice_recipient = devnull"
postconf -e "bounce_notice_recipient = devnull"
postconf -e "strict_rfc821_envelopes = yes"
postconf -e "strict_mime_encoding_domain = yes"
postconf -e "resolve_numeric_domain = no"
postconf -e "maximal_queue_lifetime = 2h"
postconf -e "bounce_queue_lifetime = 0d"
postconf -e "smtpd_helo_required = yes"
postconf -e "delay_warning_time = 0h"
postconf -e "disable_vrfy_command = yes"
postconf -e "smtpd_peername_lookup = no"

systemctl disable postfix


cat << zzzISSUE1zzz > /etc/issue
****************************************************************************
WARNING - PRIVATE ELECTRONIC DEVICE - UNAUTHORIZED ACCESS PROHIBITED:
This device is a private network device. Any attempt for unauthorized
access will be logged and appropriate legal action will be taken.
Unauthorized use may subject you to criminal prosecution.  Evidence of
any such unauthorized use collected during monitoring may be used for
administrative, criminal or other adverse action. Use of this system
constitutes consent to monitoring for these purposes.

WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored.
****************************************************************************

zzzISSUE1zzz


cat << zzzISSUE2zzz >> /etc/issue
Kickstarted on #${KSDATE}

Role: c7_laptop

zzzISSUE2zzz


cat /etc/issue > /etc/issue.net
ln /etc/issue /etc/ssh/banner.txt


cat << zzzNTPCONFzzz > /etc/ntp.conf
#${KSDATE}
driftfile /var/lib/ntp/drift
restrict default nomodify notrap nopeer noquery kod
restrict 127.0.0.1 
restrict ::1
restrict 192.168.120.0 mask 255.255.255.0 nomodify notrap
#
# DONT USE THESE, USE STRATUM 1 SERVERS FROM THE EDGE
# server 0.centos.pool.ntp.org iburst
# server 1.centos.pool.ntp.org iburst
# server 2.centos.pool.ntp.org iburst
# server 3.centos.pool.ntp.org iburst
#
server 192.168.120.10 iburst burst
#
#crypto
#includefile /etc/ntp/crypto/pw
keys /etc/ntp/keys
#trustedkey 4 8 42
#requestkey 8
#controlkey 8
# statistics clockstats cryptostats loopstats peerstats
disable monitor
#${KSDATE}

zzzNTPCONFzzz


cat << zzzAUDITRULESzzz > /etc/audit/rules.d/audit.rules

# clear rules
-D

# increase buffer
-b 32768

# rate limit
-r 0

# exclude cwd noise
-a exclude,always -F msgtype=CWD

# 10.2.4
# Invalid logical access attempts
-a always,exit -F arch=b64 -S all -F exit=-13 -k access

# 10.2.7
# Creation and deletion of system level objects, including roots home dir.
-a always,exit -S all -F dir=/root -F perm=wa -k system_mod
-a always,exit -S all -F dir=/etc -F perm=wa -k system_mod
-a always,exit -S all -F dir=/boot -F perm=wa -k system_mod
-a always,exit -S all -F dir=/usr/lib -F perm=wa -k system_mod
-a always,exit -S all -F dir=/bin -F perm=wa -k system_mod
-a always,exit -S all -F dir=/lib -F perm=wa -k system_mod
-a always,exit -S all -F dir=/lib64 -F perm=wa -k system_mod
-a always,exit -S all -F dir=/sbin -F perm=wa -k system_mod
-a always,exit -S all -F dir=/usr/bin -F perm=wa -k system_mod
-a always,exit -S all -F dir=/usr/sbin -F perm=wa -k system_mod

# network connections

# immutable without reboot
-e 2

zzzAUDITRULESzzz


augenrules


cat << zzzSCREENRCzzz > /etc/screenrc
##
## customize or override in ~/.screenrc
##
## Many of these settings you can add/change during run-time with ctrl-a :command
##
##
multiuser off  # only enable this if you need to let others see or use your session
##             # ensure you have mgmt approval to let a coworker see your session
##
aclchg coworker +rx "#?" #enable r/o access to "coworker" to show lmcneil something
aclchg coworker -x "#,at,aclchg,acladd,acldel,quit" # don't allow these
aclchg somesysadmin +rwx "#?" # enable r/w access to "somesysadmin" to assist you
aclchg somesysadmin -x "#,at,aclchg,acladd,acldel,quit" # don't allow them to use these commands
activity "%c activity -> %n%f %t"
altscreen on
attrcolor b ".I"
autodetach on
bell "%c:bell -> %n%f %t^G"
bell_msg "## DING ##"
bind c screen 1 # window numbering starts at 1 not 0
bind 0 select 10
bind s eval 'split' focus screen
bind v eval 'split -v' focus screen
defbce on
defflow off
defmonitor on
defobuflimit 32768
defscrollback 10000
defutf8 on
encoding UTF-8
## you might need to change escape if you use nested ssh/screen sessions
##  or if you want cntrl+a back for emacs
# escape ^zz
hardcopy_append on
hardstatus alwayslastline
hardstatus string '%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %c'
hardstatus on
# idle 1800 quit
idle 1800 lockscreen # unlock with your login pw
## dont use logfile if you deal with sensitive information
# logfile ~/.screen_%Y%m%d.log
msgminwait 0
msgwait 2
nethack off
nonblock on
setenv LC_CTYPE en_US.UTF-8
setenv GZIP --rsyncable
## dont idle forever, but idle long enough to get through a weekend.
## execute bash, hyphen means use login so we source our ENVironment.
##  put your favorite shell here.
shell -/bin/bash
startup_message off
term screen-256color
termcapinfo xterm|xterms|xs|rxvt|linux ti@:te@
terminfo rxvt* 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
vbell off
vbell_msg ""
vbellwait 0
verbose off
## don't kill window after the process died
# zombie "^["
##
##  Note: Start with hyphen on shells to pick up ENV
##        examples are commented out.
##
##          Title    #  Program
  screen -t Shell1   1 -/bin/bash
  screen -t Shell2   2 -/bin/bash
# screen -t Build1   3 ssh -q i-dev006.some.amazonaws.com
# screen -t Build2   4 ssh -q i-dev007.some.amazonaws.com
# screen -t Daily1   5 ssh -q i-dev042.some.amazonaws.com '/some/dir/start_build.sh;sleep 3600'
# screen -t Python   6 python
  select 1

zzzSCREENRCzzz


cat << zzzOSVARSzzz > /etc/profile.d/os_vars.sh
#${KSDATE}
# avoid passwords in history
readonly HISTFILE=/dev/null
# easier to dedupe at block level
readonly GZIP="--rsyncable"
# dont idle forever
readonly TMOUT=259200
export HISTFILE GZIP TMOUT

zzzOSVARSzzz


cat << zzzTCPWRAPPERSDENYzzz > /etc/hosts.deny
#${KSDATE}
ALL : ALL

zzzTCPWRAPPERSDENYzzz


cat << zzzTCPWRAPPERSALLOWzzz > /etc/hosts.allow
#${KSDATE}
sshd : ALL
# rpcbind : 192.168.120.10 192.168.120.11

zzzTCPWRAPPERSALLOWzzz


touch /.autorelabel


# set a quota in /home 
xfs_quota -x -c 'limit -g bsoft=2048m bhard=4096m isoft=1024 ihard=2048 users' /home
xfs_quota -x -c 'limit bsoft=512m bhard=1024m isoft=512 ihard=1024 ohadmin' /home
# xfs_quota -x -c 'report -h' /home


printf "options attempts:2 timeout:2 rotate single-request-reopen\n" >> /etc/resolv.conf


# in case we are a laptop, dont hybernate if lid is closed.  We are a server.
sed -i -e 's/.*HandlePowerKey.*/HandlePowerKey=poweroff/g' /etc/systemd/logind.conf
sed -i -e 's/.*HandleSuspendKey.*/HandleSuspendKey=ignore/g' /etc/systemd/logind.conf
sed -i -e 's/.*HandleHibernateKey.*/HandleHibernateKey=ignore/g' /etc/systemd/logind.conf
sed -i -e 's/.*HandleLidSwitch.*/HandleLidSwitch=ignore/g' /etc/systemd/logind.conf

# shutdown faster
sed -i -e 's/.*DefaultTimeoutStopSec.*/DefaultTimeoutStopSec=30s/g' /etc/systemd/system.conf


# systemd pigs
sed -i -e 's/.*SystemMaxUse.*/SystemMaxUse=40M/g' /etc/systemd/journald.conf
sed -i -e 's/.*RuntimeMaxUse.*/RuntimeMaxUse=16M/g' /etc/systemd/journald.conf

# Docker use OverlayFS and avoid the big devicemapper file
sed -i -e 's/DOCKER_STORAGE_OPTIONS.*/DOCKER_STORAGE_OPTIONS= --storage-driver=overlay/g' /etc/sysconfig/docker-storage
echo "overlay" > /etc/modules-load.d/overlay.conf

if [ -f /etc/crontab ] && [ -f /etc/postfix/aliases ] ; then
sed -i -e 's/root/devnull/g' /etc/crontab
else
sed -i -e 's/root//g' /etc/crontab
fi

if [ -f /etc/cron.d/0hourly ] && [ -f /etc/postfix/aliases ] ; then
sed -i -e 's/root/devnull/g' /etc/cron.d/0hourly
else
sed -i -e 's/root//g' /etc/cron.d/0hourly
fi

if [ -f /etc/postfix/aliases ] ; then
printf "devnull:\t\t/dev/null" >> /etc/postfix/aliases
postmap /etc/postfix/aliases
fi
if [ -f /etc/aliases ] ; then
printf "devnull:\t\t/dev/null" >> /etc/aliases
fi


cat << zzzEPELREPOzzz > /etc/yum.repos.d/EPEL.repo
[EPEL]
name=EPEL
#baseurl=http://192.168.120.10/mirror/epel/7/x86_64
baseurl=https://dl.fedoraproject.org/pub/epel/7/x86_64/
enabled=1
gpgcheck=1
#gpgkey=http://192.168.120.10/mirror/RPM-GPG-KEY-EPEL-7
gpgkey=https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7

zzzEPELREPOzzz


cat << zzzVIRTUALBOXREPOzzz > /etc/yum.repos.d/VIRTUALBOX.repo
[virtualbox]
name=VirtualBox
baseurl=http://download.virtualbox.org/virtualbox/rpm/el/7/x86_64/
enabled=1
gpgcheck=1
gpgkey=http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc

zzzVIRTUALBOXREPOzzz


rpm --import http://192.168.120.10/mirror/RPM-GPG-KEY-CentOS-7
rpm --import http://192.168.120.10/mirror/RPM-GPG-KEY-EPEL-7
rpm --import http://192.168.120.10/mirror/oracle_vbox.asc


grubby --update-kernel=ALL --remove-args="consoleblank nohz highres edd selinux audit crashkernel elevator intel_idle.max_cstate processor.max_cstate nohalt idle acpi_pad.disable nicdelay linksleep rhgb quiet cmdline text vga"

grubby --update-kernel=ALL --args="consoleblank=0 edd=off selinux=1 audit=1 elevator=noop noparport text acpi_pad.disable=1 rd_NO_MD LANG=en_US.UTF-8"


# in the event we use nfs
echo "RPCNFSDCOUNT=255" > /etc/sysconfig/nfs
echo "LOCKD_TCPPORT=32767" >> /etc/sysconfig/nfs
echo "LOCKD_UDPPORT=32767" >> /etc/sysconfig/nfs
echo "MOUNTD_PORT=892" >> /etc/sysconfig/nfs
echo "RQUOTAD_PORT=875" >> /etc/sysconfig/nfs
echo "STATD_PORT=662" >> /etc/sysconfig/nfs
echo "STATD_OUTGOING_PORT=2020" >> /etc/sysconfig/nfs

echo "NETWORKING_IPV6=no" >> /etc/sysconfig/network
echo "NOZEROCONF=yes" >> /etc/sysconfig/network
echo "IPV6INIT=no" >> /etc/sysconfig/network


# attack surface does not apply if sudo is unrestricted
groupadd -g 99500 docker
usermod -G docker ohadmin

pwck -s
grpck -s

rm -Rf /var/log/journal
yum clean all
rm -f /tmp/*
rm -Rf /tmp/.[0-Z]*
yum clean all

printf "\n\nPost steps completed.\n\n"

%end
# END POST

%addon com_redhat_kdump --disable

%end

# reboot after build, or poweroff
reboot
#poweroff

#
